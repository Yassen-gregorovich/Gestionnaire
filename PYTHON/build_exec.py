#!/usr/bin/env python3
"""Script de build pour cr√©er un ex√©cutable"""
import os
import subprocess
import sys
import shutil

def build_exe():
    """Construit l'ex√©cutable avec PyInstaller"""
    
    # V√©rifier si PyInstaller est install√©
    try:
        import PyInstaller
    except ImportError:
        print("üì¶ Installation de PyInstaller...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", "pyinstaller"])
    
    # S'assurer qu'on est dans le bon dossier
    script_dir = os.path.dirname(os.path.abspath(__file__))
    os.chdir(script_dir)
    
    # Dossier racine du projet (parent de PYTHON)
    root_dir = os.path.dirname(script_dir)
    
    # Commande PyInstaller avec ic√¥ne et optimisations
    cmd = [
        "pyinstaller",
        "--onefile",
        "--windowed",
        "--name=GestionnaireLogiciels",
        "--clean",
        "--noconfirm",
        "app.py"
    ]
    
    print("üî® Construction de l'ex√©cutable...")
    
    # Ex√©cuter PyInstaller
    result = subprocess.run(cmd, cwd=script_dir)
    
    # D√©placer l'ex√©cutable vers la racine du projet
    if result.returncode == 0:
        dist_path = os.path.join(script_dir, "dist", "GestionnaireLogiciels.exe")
        target_path = os.path.join(root_dir, "GestionnaireLogiciels.exe")
        
        if os.path.exists(dist_path):
            # Supprimer l'ancien ex√©cutable s'il existe
            if os.path.exists(target_path):
                os.remove(target_path)
            
            shutil.move(dist_path, target_path)
            print(f"‚úÖ Build termin√© ! L'ex√©cutable est √† la racine : GestionnaireLogiciels.exe")
            
            # Nettoyer les fichiers temporaires
            cleanup_files = [
                os.path.join(script_dir, "build"),
                os.path.join(script_dir, "dist"),
                os.path.join(script_dir, "GestionnaireLogiciels.spec")
            ]
            
            for file_path in cleanup_files:
                if os.path.exists(file_path):
                    if os.path.isdir(file_path):
                        shutil.rmtree(file_path)
                        print(f"üßπ Supprim√© : {os.path.basename(file_path)}/")
                    else:
                        os.remove(file_path)
                        print(f"üßπ Supprim√© : {os.path.basename(file_path)}")
                        
            print("üéâ Nettoyage termin√© !")
        else:
            print("‚ùå Erreur : L'ex√©cutable n'a pas √©t√© cr√©√© dans dist/")
    else:
        print("‚ùå Erreur lors de la construction")
        return False
    
    return True

def test_executable():
    """Teste l'ex√©cutable cr√©√©"""
    script_dir = os.path.dirname(os.path.abspath(__file__))
    root_dir = os.path.dirname(script_dir)
    exe_path = os.path.join(root_dir, "GestionnaireLogiciels.exe")
    
    if os.path.exists(exe_path):
        size_mb = os.path.getsize(exe_path) / (1024 * 1024)
        print(f"üìä Taille de l'ex√©cutable : {size_mb:.1f} MB")
        print(f"üìç Emplacement : {exe_path}")
        
        # Test rapide de lancement (optionnel)
        try:
            print("üß™ Test de l'ex√©cutable... (fermez la fen√™tre qui s'ouvre)")
            subprocess.Popen([exe_path], cwd=root_dir)
            print("‚úÖ L'ex√©cutable se lance correctement !")
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lors du test : {e}")
    else:
        print("‚ùå Ex√©cutable non trouv√©")

if __name__ == "__main__":
    if build_exe():
        print("\n" + "="*50)
        test_executable()
        print("="*50)
        print("üöÄ Pr√™t √† utiliser ! Double-cliquez sur GestionnaireLogiciels.exe")
